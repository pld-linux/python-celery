#!/bin/sh
#
# celeryd	Starts the Celery worker daemon.
#
# chkconfig:	2345 55 45
# description:	Celery worker daemon
# config: /etc/sysconfig/celeryd
# pidfile: /var/run/celeryd.pid

### BEGIN INIT INFO
# Provides:          celeryd
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: celery task worker daemon
### END INIT INFO

DEFAULT_NODES="celery"

# Source function library
. /etc/rc.d/init.d/functions

# Get service config
[ -f /etc/sysconfig/celeryd ] && . /etc/sysconfig/celeryd

CELERYD_USER=${CELERYD_USER:-"celery"}
CELERYD_GROUP=${CELERYD_GROUP:-"users"}

CELERYD_LOG_FILE=${CELERYD_LOG_FILE:-${CELERYD_LOGFILE:-"/var/log/celery/%n.log"}}
CELERYD_PID_FILE=${CELERYD_PID_FILE:-${CELERYD_PIDFILE:-"/var/run/celery/%n.pid"}}
CELERYD_LOG_LEVEL=${CELERYD_LOG_LEVEL:-${CELERYD_LOGLEVEL:-"INFO"}}

CELERYD=${CELERYD:-"/usr/bin/celeryd"}

CELERYD_MULTI=${CELERYD_MULTI:-"/usr/bin/celeryd-multi"}
CELERYD_NODES=${CELERYD_NODES:-$DEFAULT_NODES}

if [ -n "$2" ]; then
    CELERYD_OPTS="$CELERYD_OPTS $2"
fi

if [ -n "$CELERY_PYTHONPATH" ]; then
    PYTHONPATH=$CELERY_PYTHONPATH
    export PYTHONPATH
fi

if [ -n "$CELERY_CONFIG_MODULE" ]; then
    CELERYD_OPTS="$CELERYD_OPTS --config=$CELERY_CONFIG_MODULE"
fi

if [ -n "$CELERY_LOADER" ]; then
    CELERYD_OPTS="$CELERYD_OPTS --loader=$CELERY_LOADER"
fi

# Extra start-stop-daemon options, like user/group.
if [ -n "$CELERYD_CHDIR" ]; then
    DAEMON_OPTS="$DAEMON_OPTS --chdir $CELERYD_CHDIR"
fi
if [ -n "$CELERYD_USER" ]; then
    DAEMON_OPTS="$DAEMON_OPTS --chuid $CELERYD_USER"
fi
if [ -n "$CELERYD_GROUP" ]; then
    DAEMON_OPTS="$DAEMON_OPTS --group $CELERYD_GROUP"
fi

start() {
	# Check if the service is already running?
	if [ -f /var/lock/subsys/celeryd ]; then
		msg_already_running "celeryd"
		return
	fi

	msg_starting "celeryd"
	start-stop-daemon --start $DAEMON_OPTS --background \
		--exec $CELERYD_MULTI \
		start $CELERYD_NODES -- \
		--pidfile="$CELERYD_PID_FILE" \
		--logfile="$CELERYD_LOG_FILE" \
		--loglevel="$CELERYD_LOG_LEVEL" \
		$CELERYD_OPTS
	ok
	RETVAL=$?
	[ $RETVAL -eq 0 ] && touch /var/lock/subsys/celeryd
}

stop() {
	if [ ! -f /var/lock/subsys/celeryd ]; then
		msg_not_running "celeryd"
		return
	fi

	msg_stopping "celeryd"
	$CELERYD_MULTI stop $CELERYD_NODES --pidfile="$CELERYD_PID_FILE" >/dev/null 2>&1
	RETVAL=$?
	if [ $RETVAL == 0 ]; then
		ok
		rm -f /var/lock/subsys/celeryd >/dev/null 2>&1
	else
		fail
	fi
}

RETVAL=0
# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  restart)
	stop
	start
	;;
  try-restart)
	stop
	start
	;;
  status)
	cd $CELERYD_CHDIR
	celeryctl status --config="$CELERY_CONFIG_MODULE"
	;;
  *)
	msg_usage "$0 {start|stop|restart|try-restart|kill}"
	exit 3
	;;
esac

exit $RETVAL
